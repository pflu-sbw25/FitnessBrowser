#!/usr/bin/perl -w

#######################################################
## domains.cgi
##
## Copyright (c) 2015 University of California
##
## Authors:
## Victoria Lo and Morgan Price
#######################################################
#
# This page generates the overall results for a single 
# organism, with a link to download the file of all 
# experimental results (generated by createExpData.cgi) 
# in addition to a table with overall data, linking to 
# pages with the individual expGroup results.
#
# Required CGI parameters:
# orgId -- which organism to search for
# locusId -- which locus to search for

use strict;
use CGI qw(:standard Vars);
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
use DBI;

use lib "../lib";
use Utils;

my $cgi=CGI->new;

my $orgId = $cgi->param('orgId') || die "No orgId parameter";
my $locusId = $cgi->param('locusId') || die "No locusId parameter";

my $style = Utils::get_style();
my $dbh = Utils::get_dbh();
my $orginfo = Utils::orginfo($dbh);
Utils::fail($cgi, "Unknown organism: $orgId") unless $orgId eq "" || exists $orginfo->{$orgId};


# main table
# gather data and slice it into an array of hashes
my $cond = $dbh->selectall_arrayref(qq{SELECT domainDb, orgId, locusId, domainId, domainName, begin, end, score, evalue, definition, COUNT(DISTINCT domainId) AS nDom FROM GeneDomain WHERE orgId=? AND locusId=? GROUP BY domainDb; },
    { Slice => {} },
    $orgId, $locusId);
# Utils::fail($cgi, "Unknown locus: $locusId") unless $locusId eq ""; #|| exists $locusId;


# gather number of genes and data
# my $numGenes = $dbh->selectrow_array(qq{SELECT COUNT (DISTINCT locusId) FROM Gene WHERE orgId = ?;}, undef, $orgId);

# my $numData = $dbh->selectrow_array(qq{SELECT COUNT (DISTINCT locusId) FROM GeneFitness WHERE orgId = ?;}, undef, $orgId);


# write the title
my $title = scalar(@$cond) > 0 ? "Gene Domains for $orginfo->{$orgId}{genome} at Locus $locusId" : "No experiments for this organism and/or locus.";


print
    header,
    start_html( -title => $title, -style => { -code => $style }, -author => 'Morgan Price, Victoria Lo',
		-meta => { 'copyright' => 'copyright 2015 UC Berkeley' }),
    h2($title),
    div({-style => "float: right; vertical-align: top;"}, a({href => "help.cgi#specific"}, "Help"));

#exit if no results
Utils::fail($cgi, "No experiments for this organism and/or locus.") if @$cond == 0;

#create table
my @headings = qw{Domain ID Length Score EValue Begin End};
my @trows = ( Tr({ -valign => 'top', -align => 'center' }, map { th($_) } \@headings) );
foreach my $row (@$cond) {
	# display result row by row
	my $len = $row->{end}-$row->{begin};
	if ($row->{domainDb} eq 'PFam') {
    	push @trows, Tr({ -valign => 'top', -align => 'left' },
    	td([ $row->{domainName}, #name/description
		 	a( { href => "http://pfam.xfam.org/family/$row->{domainId}"},
		 	$row->{domainId}), #ID
		 	$len, # $row->{}, #length diagram: end-begin
		 	$row->{score}, #score
		 	$row->{evalue}, #evalue
		 	$row->{begin}, #begin
		 	$row->{end}, #end
	 	]))
	} elsif ($row->{domainDb} eq 'TIGRFam') {
		push @trows, Tr({ -valign => 'top', -align => 'left' },
		td([ $row->{definition} || $row->{domainName}, #name/description
		 	a( { href => "http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc=$row->{domainId}"},
		 	$row->{domainId}), #ID
		 	$len, # $row->{}, #length diagram: end-begin
		 	$row->{score}, #score
		 	$row->{evalue}, #evalue
		 	$row->{begin}, #begin
		 	$row->{end}, #end
		 ])),
	}
}

print table({cellspacing => 0, cellpadding => 3}, @trows);

#display number of genes that have data out of total genes
# print $cgi->p("Fitness data for $numData genes of $numGenes genes.");


#display taxonomic information and link
# if ((defined $orginfo->{$orgId}{taxonomyId}) && ($orginfo->{$orgId}{taxonomyId} ne "")) {
	# print $cgi->p($cgi->a({href => "http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=$orginfo->{$orgId}{taxonomyId}"}, "NCBI Taxonomy"));
# }

#file of experimental data - generated by createExpData.cgi
# my $data = `./createExpData.cgi orgId=$orgId`;
# print $cgi->p($cgi->a({href => "download.cgi?orgId=$orgId"}, "Download experimental data"), " - Note: May take a minute or so to load once clicked.");
# print $cgi->p($cgi->a({href => "createExpData.cgi?orgId=$orgId"}, "Download experimental data"), " - Note: May take a few seconds to load once clicked.");


$dbh->disconnect();
Utils::endHtml($cgi);